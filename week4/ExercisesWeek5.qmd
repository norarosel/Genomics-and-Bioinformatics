## Exercise 1 - Determining mutation rates: the fluctuation test

webSalvador is a webserver that can be used to estimate mutation rates using the fluctuation test, based on the Luria-Delbrück experiment. It relies on the R package rSalvador, described in a paper by Qi Zheng. In this problem, we will briefly explore webSalvador. To know more, you can consult the reference and the R package.

To use webSalvador, the following experimental measurements are needed:

- The total number Nt of cells per culture after growth (and immediately before plating), which is assumed to be the same in each replicate culture.

- The value of the number of mutation events before the growth phase, i.e. when starting a culture. Usually N0, the number of cells used to start a culture, is small enough to ensure that it is zero, and here we will make this assumption throughout.

- The list of the number of mutants in each culture, measured as the number of colonies observed after plating for each culture.

webSalvador is based on the maximum likelihood inference method, and its main goal is to infer the value of the mutation probability per division. 

1.- A parameter inferred from data by webSalvador is m, the expected (average) number of mutation events that occurred in each culture. Assume that at each division during the growth phase, there is a probability p that a wild-type cell gives rise to one mutant daughter cell (out of two daughter cells). How can you determine the mutation probability p from m?

```{r}
#We have a plate with only one mutant cell, and in the end we have 50 cells with a mutation. 
# p = m/Nt-N0; N being the population, since at N0 there should be no mutated cells, but just in case.
```


2.- Use webSalvador in “Basic Lea-Coulson” estimation mode, with the default data. It will provide estimates of m and p. Check that they satisfy the equation you obtained in question 1. What estimates do you expect if Nt was 10 times larger but the list of the number of mutants in each culture was the same? Check that your expectation is correct by using webSalvador.

```{r}
# mu is p.

#quantity	point est	lower limit	upper limit
#m	2.1262	1.0255	3.7039
#μ	8.50e-08	4.10e-08	1.48e-07

#It is 10 times smaller.

#quantity	point est	lower limit	upper limit
#m	2.1262	1.0255	3.7039
#μ	8.50e-09	4.10e-09	1.48e-08
```


3.- webSalvador also provides the limits of a confidence interval for m and p. Qualitatively, how do you expect the size of the confidence interval to change in a hypothetical case where twice more cultures were considered and the exact same list of numbers of mutants was obtained twice? Check that your expectation is correct by using webSalvador.

```{r}

#Cuanto más pequeño, más acotado y seguro; como hemos obtenido el mismo resultado, podemos estar seguros.

```

4.- In basic estimates, all mutants are assumed to give rise to a colony and to be counted, which corresponds to a plating efficiency of 1. In practice, the plating efficiency epsilon is often below 1, for instance because only a fraction of each culture is plated. Qualitatively, what do you expect for the estimate of p if the default data is used, except that a plating efficiency epsilon=0.1 is assumed? Check that your expectation is correct by using webSalvador in “Lea-Coulson, epsilon<1” estimation mode.

```{r}
#epsilon is the percentage of living cells, if it's 1, 100% of your orginal cells are still alive. In this case we only have 10% of the original population. We expect a lower number of cells because a lot of them have died, but we still have mutated cells that have survived, so that implies more and different mutations.

#quantity	point est	lower limit	upper limit
# m	9.8821	4.7575	17.1668
# μ	3.95e-07	1.90e-07	6.87e-07

```


5.- In basic estimates, mutants are assumed to be neutral. In other words, their relative fitness w is assumed to be 1. Qualitatively, what do you expect for the estimate of p if the default data is used, except that w>1 (for instance w=1.5)? Check that your expectation is correct by using webSalvador in “Mandelbrot-Koch” estimation mode.

```{r}

# W in 1.5 is better for the cell, mutants divide faster, it marks how good the mutation is for the cell. In this case, we shouldn't get a lower number of mutations, we should have a lot of those better cells. Instead, we get a lower probability, if we get still 50 mutated cells even though the mutation is advantageous, it has to be because the rate itself has been made smaller to compensate for that advantage, we don't say it's what happens in nature.

#Assuming w=1.5 instead of w=1 means that mutants divide faster. Thus, to obtain the same number of mutants, we have to have a smaller mutation probability.

#quantity	point est	lower limit	upper limit
# m	1.76	0.8337	3.1304
# μ	7.04e-08	3.33e-08	1.25e-07

```


## Exercise 2 - Drift and selection: simulating the Wright-Fisher model

In this exercise, we will simulate the evolution of a population in the Wright-Fisher model using R.

1.- A key ingredient of the Wright-Fisher model is binomial sampling (10 times you take a ball, 1 is if you pick the mutant, 0 if not). For this, you can rely on the R function rbinom. Using this function, perform binomial sampling for a binomial distribution with parameters size=10 (number of trials, here is number of times you pick out in each experiment) and prob=0.1 (probability of success on each trial, of picking the mutant out of a bag). Sample n=1000 values from this distribution (you have 1000 different bags, you don't know how many individuals are inside each bag), compute their mean and standard deviation, and plot the resulting histograms of the values obtained.

```{r}

#We usually have 0 or 1 mutant cells picked out of those 10 picking outs.

sampled_values = rbinom(1000, size = 10, prob = .1 ) 

mean_val <- mean(sampled_values)
std_dev <- sd(sampled_values)

# Plot histogram
h1 = hist(sampled_values, main='', xlab='Number of successes')
```

2.- Simulate the Wright-Fisher process for a haploid and asexual population of 10 individuals starting with 1 neutral mutant for 150 generations (consider the initial state as generation 1 for simplicity). Plot the fraction of mutants in the population versus the number of generations. Run your simulation several times (10). Observe the results and comment.

```{r}
#Plot p vs n.
#The trajectory we observe is a random walk. There can be large differences between different individual realizations. After a sufficient time, the mutant fraction hits 0 or 1 and then remains there - this corresponds to fixation of one type and extinction of the other. Most often, the ultimate state is extinction of the mutant, and it tends to happen quite fast. In fact, in the neutral case, the probability of fixation of the mutant strain is equal to the initial number of mutants divided by the population size, i.e. mutants_ini/size. It is equal to 1/10 here.

size=10
mutants_ini=1
n_gen=150
#Creates a vector of length 150
mutant_frac = numeric(n_gen)
mutant_frac[1]=mutants_ini/size
for(j in 2:n_gen){
  mutant_frac[j]=rbinom(1, size, mutant_frac[j-1])/size
}
plot(1:n_gen, mutant_frac, pch=20, type="o", main='Neutral Wright-Fisher model', xlab='Generation', ylab='Mutant fraction')
```

3.- Construct a code with a loop that allows you to simulate 100 realizations of the Wright-Fisher process and to plot the fraction of mutants in the population versus the number of generations in these different realizations on the same plot. The hypotheses are the same as above. Run your simulation in the following conditions:

- 10 individuals starting with 1 neutral mutant for 150 generations (as above);
- 1000 individuals starting with 1 neutral mutant for 150 generations;
- 10 individuals starting with 5 neutral mutants for 150 generations;
- 1000 individuals starting with 500 neutral mutants for 150 generations.

Compare the results in these 4 situations and comment. What should happen after a sufficiently long time (you can check this by increasing the number of generations considered)? What is the impact of population size? Of the initial number of mutants?

```{r}
# With 10 individuals starting with 1 neutral mutant for 150 generations (as above): trajectories show strong fluctuations and end up in either extinction or fixation of the mutant type. Fixation is far less frequent (probability 1/10), but out of 100 realizations we see some fixation events.

size=10
mutants_ini=1
n_gen=150
n_rep=100
mutant_frac = matrix(nrow=n_gen,ncol=n_rep)
for(i in 1:n_rep){
  mutant_frac[1,i]=mutants_ini/size
  for(j in 2:n_gen){
    mutant_frac[j,i]=rbinom(1, size, mutant_frac[j-1,i])/size
  }
}
matplot(1:n_gen, mutant_frac, pch=20, type="l", lty="solid", main='Neutral Wright-Fisher model', xlab='Generation', ylab='Mutant fraction')
```
```{r}
# With 1000 individuals starting with 1 neutral mutant for 150 generations, we observe extinctions in the vast majority of cases, usually all of them in 100 realizations. In most trajectories, mutant fraction remains quite small. The probability of fixation is 1/1000 here.

size=1000
mutants_ini=1
n_gen=150
n_rep=100
mutant_frac = matrix(nrow=n_gen,ncol=n_rep)
for(i in 1:n_rep){
  mutant_frac[1,i]=mutants_ini/size
  for(j in 2:n_gen){
    mutant_frac[j,i]=rbinom(1, size, mutant_frac[j-1,i])/size
  }
}
matplot(1:n_gen, mutant_frac, pch=20, type="l", lty="solid", main='Neutral Wright-Fisher model', xlab='Generation', ylab='Mutant fraction')
```
```{r}
# With 10 individuals starting with 5 neutral mutants for 150 generations, we observe strong fluctuations as in the first case, but far more fixation events. Here the probability of fixation is 5/10=0.5.

size=10
mutants_ini=5
n_gen=150
n_rep=100
mutant_frac = matrix(nrow=n_gen,ncol=n_rep)
for(i in 1:n_rep){
  mutant_frac[1,i]=mutants_ini/size
  for(j in 2:n_gen){
    mutant_frac[j,i]=rbinom(1, size, mutant_frac[j-1,i])/size
  }
}
matplot(1:n_gen, mutant_frac, pch=20, type="l", lty="solid", main='Neutral Wright-Fisher model', xlab='Generation', ylab='Mutant fraction')
```


```{r}
# With 1000 individuals starting with 500 neutral mutants for 150 generations, the time of observation is usually not sufficient to observe fixation or extinction of the mutant strain. However, increasing this time allows to see fixation or extinction, and all trajectories do end in fixation or extinction of the mutant strain. Here the probability of fixation is again 0.5, but the dynamics are slower because population size is larger. we observe strong fluctuations as in the first case, but far more fixation events.

size=1000
mutants_ini=500
n_gen=150
n_rep=100
mutant_frac = matrix(nrow=n_gen,ncol=n_rep)
for(i in 1:n_rep){
  mutant_frac[1,i]=mutants_ini/size
  for(j in 2:n_gen){
    mutant_frac[j,i]=rbinom(1, size, mutant_frac[j-1,i])/size
  }
}
matplot(1:n_gen, mutant_frac, pch=20, type="l", lty="solid", main='Neutral Wright-Fisher model', xlab='Generation', ylab='Mutant fraction')
```

4.- Now we will include the effect of natural selection, assuming that the mutants have a relative fitness advantage s compared to the wild-type individuals (if s<0, then the mutant has a selective disadvantage). What do you need to change in your code to include selection? Write a new version of the code from question 3, allowing you to simulate 100 realizations of the Wright-Fisher process and to plot the fraction of mutants in the population versus the number of generations in these different realizations on the same plot. Run your simulation in the following conditions:

- 1000 individuals starting with 1 mutant with s=0.1 for 150 generations;
- 1000 individuals starting with 500 neutral mutants with s=0.1 for 150 generations;
- 1000 individuals starting with 500 neutral mutants with s=0.0001 for 150 generations.

Compare the results in these 3 situations and comment. What is the impact of the initial number of mutants? Of the value of s? What should s be compared to in order to predict whether the system will behave as in the 2nd case studied in this question or as in the 3rd one?

```{r}
# To include the effect of natural selection, assuming that the mutants have a relative fitness advantage s compared to the wild-type individuals, we need to change the probability of success (probability of sampling a mutant) in the binomial sampling used to construct generation n+1 from generation n. In the neutral case it was equal to the fraction x of mutants in the population. In the case with selection, fractions have to be reweighted by fitness, so the probability of success becomes (1+s)x/((1+s)x+(1-x))=(1+s)x/(1+sx). This is the point that has to be changed in the code. Note that if s=0 we get back the previous case with a probability of success equal to x. With 1000 individuals starting with 1 mutant with s=0.1 for 150 generations, we observe that most trajectories end in extinction but some give fixation, with noisy but well-defined ascending trajectories for the fraction x of mutants. We are in the regime where s<<1 but s>>1/N, so the expected fixation probability should be close to 2s=0.2, meaning that out of 100 trajectories, we should see around 20 of them that end in fixation.

size=1000
mutants_ini=1
s=0.1
n_gen=150
n_rep=100
mutant_frac = matrix(nrow=n_gen,ncol=n_rep)
for(i in 1:n_rep){
  mutant_frac[1,i]=mutants_ini/size
  for(j in 2:n_gen){
    mutant_frac[j,i] = rbinom( 1, size, (1+s)*mutant_frac[j-1,i]/(1+s*mutant_frac[j-1,i]) ) / size
  }
}
matplot(1:n_gen, mutant_frac, pch=20, type="l", lty="solid", main='Wright-Fisher model with selection', xlab='Generation', ylab='Mutant fraction')
```
```{r}
# With 1000 individuals starting with 500 neutral mutants with s=0.1 for 150 generations, we observe that all trajectories end in fixation of the mutant. This shows the strong impact of the initial number of mutants. Here s was the same as just before, but the mutant was already abundant from the beginning. When extinction happens for substantially beneficial mutants (s>>1/N) it is usually when their fraction is small. Fluctuations (genetic drift) are then important. If they have reached a certain fraction, these mutants are almost guaranteed to fix.

size=1000
mutants_ini=500
s=0.1
n_gen=150
n_rep=100
mutant_frac = matrix(nrow=n_gen,ncol=n_rep)
for(i in 1:n_rep){
  mutant_frac[1,i]=mutants_ini/size
  for(j in 2:n_gen){
    mutant_frac[j,i] = rbinom( 1, size, (1+s)*mutant_frac[j-1,i]/(1+s*mutant_frac[j-1,i]) ) / size
  }
}
matplot(1:n_gen, mutant_frac, pch=20, type="l", lty="solid", main='Wright-Fisher model with selection', xlab='Generation', ylab='Mutant fraction')
```
```{r}
# With 1000 individuals starting with 500 neutral mutants with s=0.0001 for 150 generations, we observe a behavior that is very similar to the neutral case with the same population size and initial number of mutants. Indeed here, the selective advantage of mutants is much smaller and we have s<<1/N. The mutant is effectively neutral. One should thus compare s to 1/N to predict whether the system will behave as in the 2nd case studied in this question or as in the 3rd one.

size=1000
mutants_ini=500
s=0.0001
n_gen=150
n_rep=100
mutant_frac = matrix(nrow=n_gen,ncol=n_rep)
for(i in 1:n_rep){
  mutant_frac[1,i]=mutants_ini/size
  for(j in 2:n_gen){
    mutant_frac[j,i] = rbinom( 1, size, (1+s)*mutant_frac[j-1,i]/(1+s*mutant_frac[j-1,i]) ) / size
  }
}
matplot(1:n_gen, mutant_frac, pch=20, type="l", lty="solid", main='Wright-Fisher model with selection', xlab='Generation', ylab='Mutant fraction')
```

## Exercise 3 - Drift, selection and mutation

In this exercise, we will start from our simulation of the Wright-Fisher process, but we will include mutations, and consider the case where more than two types can exist in the population at a given time. To include the case where more than two types can exist in the population at a given time, we will replace the binomial sampling in the Wright-Fisher process by multinomial sampling, which allows to sample the number of individuals of each strain at generation n+1 starting from the number of individuals of each strain (type) at generation n. For this, the function rmultinom can be used. The probability of sampling an individual from a given strain to form generation n+1 is proportional to the fraction of this strain in generation n times the fitness of this strain. To model mutations, we will consider that after a generation forms, each individual has a probability mu to mutate to another type. To simplify the description, we will consider that there are n_strains different strains (types) and that for all k, strain k can mutate to strain k+1, but the last one (strain n_strains) does not mutate. We will start with only individuals of strain 1, and assume there are n_strains=5 different possible strains.

1.- What is the probability distribution of the number of mutants from type 1 to type 2 at a given generation?

```{r}
#The probability distribution of the number of mutants from type 1 to type 2 at a given generation is binomial with success probability mu and number of trials equal to population size. Indeed, each individual in the population has a probability mu to mutate to another type, and individuals are independent.
```

2.- This question has two different versions that you can choose from: 2a. Write a code to simulate the process described above. 2b. Study the code given below.

```{r}
# See code below. The key points are the multinomial sampling to form a new generation in the Wright-Fisher spirit, but generalizing to more than two strains, and then the binomial sampling to model mutations.
```

3.- Consider the case where each strain is fitter than the previous one, specifically with fitnesses 1, 1.1, 1.2, 1.3, 1.4. Using a population size of 1000 individuals and a mutation probability mu=0.00001, simulate the evolution of the population for n_gen=6000 generations. Plot the fraction of each strain in the population. Comment on the results. How many strains usually exist in the population in this case? What condition on mu should hold for the population to have such an evolution?

```{r}
# In the case where each strain is fitter than the previous one, specifically with fitnesses 1, 1.1, 1.2, 1.3, 1.4, using a population size of 1000 individuals and a mutation probability mu=0.00001, we observe successive fixation events of the different strains. Only one or two strains usually exist in the population in this case - most of the time, a single one, and sometimes two when mutants appear and when they are in the process of taking over. For the population to have such an evolution, where at most two strains are present, mu needs to be small, specifically mu<<1/N.
```

```{r}
size=1000
n_strains=5
fitness=c(1, 1.1, 1.2, 1.3, 1.4) # or c(1, 1.1, 1, 1.3, 1.4) with mu=0.001 and n_gen=3000
mu=0.00001 # or mu=0.001 with n_gen=300
prob = numeric(n_strains)
strain_nmut = numeric(n_strains)
strain_nmut[n_strains] = 0 #last type is assumed not to mutate
strain_num_aftermut = numeric(n_strains)
n_gen=6000
strain_frac = matrix(nrow=n_gen,ncol=n_strains)
strain_frac[1,1]=1

for(i in 2:n_strains){
  strain_frac[1,i]=0
}

for(j in 2:n_gen){
  for(i in 1:n_strains){
    prob[i]=fitness[i]*strain_frac[j-1,i] #in principle we should normalize so that the entries of prob sum to one, but rmultinom does not require this
  }
  strain_num_beforemut=t( rmultinom( 1, size, prob ) )
  strain_num_aftermut=strain_num_beforemut
  for(i in 1:(n_strains-1)){
    strain_nmut[i]=rbinom( 1, strain_num_beforemut[i], mu )
  }
  for(i in 1:(n_strains-1)){ #last type is assumed not to mutate
    strain_num_aftermut[i]=strain_num_aftermut[i]-strain_nmut[i]
    strain_num_aftermut[i+1]=strain_num_aftermut[i+1]+strain_nmut[i]
  }
  strain_frac[j, ] = strain_num_aftermut / size
}

matplot(1:n_gen, strain_frac, pch=20, type="l", lty="solid", main='Wright-Fisher model with selection and mutations', xlab='Generation', ylab='Mutant fraction')
labels = sprintf('Strain %2d', 1:n_strains)
legend("topright", lty="solid", col=1:n_strains, labels)
```
4.- Same question but using a mutation probability mu=0.001, and n_gen=300 generations.

```{r}
# Using a mutation probability mu=0.001, mutations are much more frequent and we are no longer in the regime mu<<1/N. Thus, mutants of strain n+2 usually appear from strain n+1 while strain n+1 is taking over and in the process of replacing strain n. This means that more than two strains usually coexist, before the last strain takes over. This is called the clonal interference regime.
```


```{r}
size=1000
n_strains=5
fitness=c(1, 1.1, 1.2, 1.3, 1.4) # or c(1, 1.1, 1, 1.3, 1.4) with mu=0.001 and n_gen=3000
mu=0.001
prob = numeric(n_strains)
strain_nmut = numeric(n_strains)
strain_nmut[n_strains] = 0 #last type is assumed not to mutate
strain_num_aftermut = numeric(n_strains)
n_gen=300
strain_frac = matrix(nrow=n_gen,ncol=n_strains)
strain_frac[1,1]=1

for(i in 2:n_strains){
  strain_frac[1,i]=0
}

for(j in 2:n_gen){
  for(i in 1:n_strains){
    prob[i]=fitness[i]*strain_frac[j-1,i] #in principle we should normalize so that the entries of prob sum to one, but rmultinom does not require this
  }
  strain_num_beforemut=t( rmultinom( 1, size, prob ) )
  strain_num_aftermut=strain_num_beforemut
  for(i in 1:(n_strains-1)){
    strain_nmut[i]=rbinom( 1, strain_num_beforemut[i], mu )
  }
  for(i in 1:(n_strains-1)){ #last type is assumed not to mutate
    strain_num_aftermut[i]=strain_num_aftermut[i]-strain_nmut[i]
    strain_num_aftermut[i+1]=strain_num_aftermut[i+1]+strain_nmut[i]
  }
  strain_frac[j, ] = strain_num_aftermut / size
}

matplot(1:n_gen, strain_frac, pch=20, type="l", lty="solid", main='Wright-Fisher model with selection and mutations', xlab='Generation', ylab='Mutant fraction')
labels = sprintf('Strain %2d', 1:n_strains)
legend("topright", lty="solid", col=1:n_strains, labels)
```

5.- Now consider that the fitnesses of the successive strains are 1, 1.1, 1, 1.3, 1.4. What is special in the step going from the second to the third strain? Simulate the process for a mutation probability mu=0.0005, and n_gen=5000 generations. Comment, giving special attention to the third strain. How does the fourth strain emerge? What would happen if mu was much smaller?

```{r}
# Assuming that the fitnesses of the successive strains are 1, 1.1, 1, 1.3, 1.4, the step going from the second to the third strain is special because the third strain is less fit than the second one. So far, we only considered beneficial mutations, but this particular mutation is deleterious. Using a mutation probability mu=0.0005, and n_gen=5000 generations, we observe that the third strain does not take over or reach high fractions, which is very different from the previous cases. The fourth strain emerges from a small minority of individuals of the third strain. This process takes time, and as a result, the second strain dominates for a long time. If mu was much smaller, this process would become much slower. Remark: In fact, below a certain mu, we would usually have to wait until the deleterious mutant (strain 3) fixes to then get a fixation of strain 4.
```

```{r}
size=1000
n_strains=5
fitness=c(1, 1.1, 1, 1.3, 1.4) 
mu=0.0005
prob = numeric(n_strains)
strain_nmut = numeric(n_strains)
strain_nmut[n_strains] = 0 #last type is assumed not to mutate
strain_num_aftermut = numeric(n_strains)
n_gen=5000
strain_frac = matrix(nrow=n_gen,ncol=n_strains)
strain_frac[1,1]=1

for(i in 2:n_strains){
  strain_frac[1,i]=0
}

for(j in 2:n_gen){
  for(i in 1:n_strains){
    prob[i]=fitness[i]*strain_frac[j-1,i] #in principle we should normalize so that the entries of prob sum to one, but rmultinom does not require this
  }
  strain_num_beforemut=t( rmultinom( 1, size, prob ) )
  strain_num_aftermut=strain_num_beforemut
  for(i in 1:(n_strains-1)){
    strain_nmut[i]=rbinom( 1, strain_num_beforemut[i], mu )
  }
  for(i in 1:(n_strains-1)){ #last type is assumed not to mutate
    strain_num_aftermut[i]=strain_num_aftermut[i]-strain_nmut[i]
    strain_num_aftermut[i+1]=strain_num_aftermut[i+1]+strain_nmut[i]
  }
  strain_frac[j, ] = strain_num_aftermut / size
}

matplot(1:n_gen, strain_frac, pch=20, type="l", lty="solid", main='Wright-Fisher model with selection and mutations', xlab='Generation', ylab='Mutant fraction')
labels = sprintf('Strain %2d', 1:n_strains)
legend("topright", lty="solid", col=1:n_strains, labels)
```

