---
title: "3. Hidden Markov Models"
author: "EPFL - SV - BIO-463"
date: 03/05/2024
date-format: long
format:
  html:
    code-fold: false
    embed-resources: true
  pdf:
    papersize: a4
    fig-width: 6
    fig-height: 4
---

## Exercise 1: Translate genes, find longest open reading frame

1. Load the file *GeneSequences.fa*
2. [Translate](https://www.rdocumentation.org/packages/Biostrings/versions/2.40.2/topics/translate) the sequences (in 3 frames: only the forward strand)
3. Find the longest ORF in each sequence: use [matchPattern](https://www.rdocumentation.org/packages/Biostrings/versions/2.40.2/topics/matchPattern) for residues "*" and "M"
4. Save it as a fasta file named *orf.fa*
```{r}
#| label: 3-frame translation
#| eval: false
library("Biostrings")
#1.-
genes = readDNAStringSet("GeneSequences.fa")
#2.-
genes_start_2 = subseq(genes, start = 2)
genes_start_3 = subseq(genes, start = 3)
translated_frames = translate(c(genes, genes_start_2, genes_start_3), if.fuzzy.codon = "solve", no.init.codon = TRUE)
translated_frames

#3.- We first search from the star, because every M before the star can be a protein, but shorter than another M that would be more to the left.

#We create the vector for the longest Open Reading Frame, replicates the "" for the length of genes
longest_orf = AAStringSet(rep('', length(genes)))
#Gives names for human or owl as in genes
names(longest_orf) = names(genes)

for (nf in 1:length(translated_frames)) {
    #frame from translated_frames
    frm = translated_frames[[nf]]
    #You need name for human or owl
    nme = names(translated_frames)[[nf]]
    ### 1. find positions of "stops", "*"
    stops = matchPattern("*", frm)
    n0 = 1
    ### 2. repeat for each stop found (start = end = position of "*" in the sequence), the guy showed the structure of the output, it had start
    for (n1 in start(stops)) {
        ### find first start ("M") between n0 and n1
        starts = matchPattern("M", frm[n0:n1])
        if (length(starts) > 0) {
            n0 = n0+start(starts)[1]-1
            #there will be two names, it does it for human and for owl, depending on the nf of the first loop
            if (nchar(longest_orf[nme]) < n1-n0+1) longest_orf[[nme]] = frm[n0:n1]
        }
        ### next search will be between this stop and the next
        n0 = n1
    }
}

longest_orf

#4.-

writeXStringSet(longest_orf, "orf.fa")


```

## Exercise 2: Construct an HMM to find ORFs

Implement an HMM according to the schema below

![](HMM_schema.jpeg)

* The states **S1, S2, S3** represent a start codon, **E1, E21, E22, E32, E33** represent the [3 possible stop codons](https://en.wikipedia.org/wiki/Stop_codon), **B** is background and **I1, I2, I3** form "inner" codons.
* The symbols are nucleotides *A, C, G, T*, states other than start and end codons emit uniform probabilities
* The transition probabilities are obvious (all stops have the same probability) except when specified on the schema

1. Complete the code below by filling in all matrix elements:
```{r}
#| label: ORF HMM
#| eval: false
#hidden states
states = c("B", "S1", "S2", "S3", "I1", "I2", "I3", "E1", "E21", "E22","E31", "E32")
nstates = length(states)
#observations
symbols = c("A", "C", "G", "T")
nsym = length(symbols)

#Emat = matrix(0, ncol=nsym, nrow=nstates)
#Mmat = matrix(0, ncol=nstates, nrow=nstates)

### Most emission prob. will be 1/4 so fill the entire matrix with 1/4,
### then modify the different ones. Rows are the states, columns the observations.
Emat = matrix(1/4, ncol=nsym, nrow=nstates, dimnames=list(states, symbols))
### start is ATG
Emat["S1",] = c(1, 0, 0, 0)
Emat["S2",] = c(0, 0, 0, 1)
Emat["S3",] = c(0, 0, 1, 0)
### stop is one of TAG, TAA, TGA
### first char is A
Emat["E1",] = c(0, 0, 0, 1)
### second is A or G
Emat["E21",] = c(1, 0, 0, 0)
Emat["E22",] = c(0, 0, 1, 0)
### third is A or G after A, and only A after G
Emat["E31",] = c(0, 0, 1, 0)
Emat["E32",] = c(1, 0, 0, 0)

### Transition matrix: according to the schema
Mmat = matrix(0, ncol=nstates, nrow=nstates, dimnames=list(states, states))
Mmat["B", "B"] = 0.98
Mmat["B", "S1"] = 0.02
Mmat["S1", "S2"] = 1
Mmat["S2", "S3"] = 1
Mmat["S3", "I1"] = 1
Mmat["I1", "I2"] = 1
Mmat["I2", "I3"] = 1
Mmat["I3", "I1"] = 0.9
Mmat["E31", "B"] = 0.95
Mmat["E32", "B"] = 0.95
### Sum of probabilities going out of any state must be 1
Mmat["I3", "E1"] = 0.1
Mmat["E31", "S1"] = 0.05
Mmat["E32", "S1"] = 0.05
### These must be calculated so that each path through the E states has probability 1/3
Mmat["E1", "E21"] = 2/3
Mmat["E1", "E22"] = 1/3
Mmat["E21", "E31"] = 0.5
Mmat["E21", "E32"] = 0.5
Mmat["E22", "E32"] = 1
```
2. Create the corresponding [HMM object](https://www.rdocumentation.org/packages/aphid/versions/1.3.3/topics/aphid) (see code below)
3. Plot the HMM schema (see [plot.HMM](https://www.rdocumentation.org/packages/aphid/versions/1.3.3/topics/plot.HMM)) 
4. Run the [Viterbi algorithm](https://www.rdocumentation.org/packages/aphid/versions/1.3.3/topics/Viterbi) on the segment *1501:1800* of the human gene and display the resulting states

```{r}
#| label: Viterbi
#| eval: false

#2.- All this was given
library("aphid")
### convert DNA sequence to a list of individual characters,
### keep only the positions 1501-1800
seq = unlist(strsplit(as.character(genes[[1]]), ''))[1501:1800]

### we create an artificial "Begin" that goes directly to "B":
### add 1 row and 1 column to Mmat
M2 = cbind(rep(0, nstates+1), rbind(rep(0, nstates), Mmat))
### label columns and rows with states
dimnames(M2) = list(from=c("Begin", states), to=c("Begin", states))
### transit from "Begin" to "B"
M2["Begin", "B"] = 1
### label rows with states and columns with symbols (ACGT)
dimnames(Emat) = list(from=states, to=symbols)

### Emat / Mmat are in units of probability,
### the HMM calculations are with log(probability)
hmm.orf = structure(list(A=log(M2), E=log(Emat), qe=rep(.25,4)), class="HMM")

#3.-
plot(hmm.orf)

#4.- Test it with new data, we have told it how to go from states to observations (nucleotides), and with the new human data it will find me states (tell me where it starts, ends, etc.) form the nucleotides. Therefore, it will find me ORFs, we see the sss, iiiii and eee.

hmm.vtrb = Viterbi(hmm.orf, seq)

### for a nice visual display: concatenate all nucleotides into one string
### and show the 1st letter of each state name aligned below
c(paste(seq, collapse=''), paste(substr(states,1,1)[hmm.vtrb$path+1], collapse=''))
```

